{"version":3,"sources":["components/GameOfLife.js","App.js","serviceWorker.js","index.js"],"names":["Grid","styled","div","GameButtons","Container","GameOfLife","props","useState","gridSize","setGridSize","array","useRef","keepPlaying","playing","setPlaying","elementsWhosNeighborsChanged","alive","generation","setGeneration","ready","setReady","useEffect","current","changeGridSize","i","push","j","object","ref","React","createRef","value","neighbors","name","stationCount","k","el","e","reset","forEach","row","index2","setAttribute","width","height","viewBox","xmlns","Array","isArray","map","index","val","transform","fill","onClick","index1","onCellClick","stroke","num","Math","ceil","random","random1","floor","random2","neighbor","disabled","window","setTimeout","play","changeToBlue","changeToWhite","Object","values","count","state","requestAnimationFrame","onChange","target","type","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2103a5b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Input } from \"antd\";\n\n/**\n *   GameOfLife\n *\n *  @component\n *\n */\nconst GameOfLife = ( props ) => {\n  \n  const [ gridSize, setGridSize ] = useState( 60 );\n  const array = useRef();\n  const keepPlaying = useRef( false );\n  const [ playing, setPlaying ] = useState( false );\n  const elementsWhosNeighborsChanged = useRef();\n  const alive = useRef();\n  const [ generation, setGeneration ] = useState( 1 );\n  const [ ready, setReady ] = useState( false );\n  \n  useEffect( () => {\n    setPlaying( false );\n    setReady( false );\n    alive.current = {};\n    changeGridSize();\n  }, [ gridSize ] );\n  \n  const changeGridSize = () => {\n    \n    array.current = [];\n    for( let i = 0; i < gridSize; i++ ){\n      array.current.push( [] );\n      for( let j = 0; j < gridSize; j++ ){\n        const object = {\n          ref: React.createRef(),\n          value: 0,\n          neighbors: [],\n          name: `${ i }_${ j }`,\n          stationCount: 0,\n        };\n        for( let k = -1; k < 2; k++ ){\n          try{\n            const el = array.current[ i - 1 ][ j + k ];\n            el.neighbors.push( object );\n            object.neighbors.push( el );\n          }catch( e ){\n          \n          }\n        }\n        \n        if( j > 0 ){\n          array.current[ i ][ j - 1 ].neighbors.push( object );\n          object.neighbors.push( array.current[ i ][ j - 1 ] );\n        }\n        array.current[ i ].push( object );\n      }\n    }\n    \n    setReady( !ready );\n  };\n  \n  const play = () => {\n    if( !playing ){\n      setPlaying( true );\n    }\n    const changeToBlue = [];\n    const changeToWhite = [];\n    \n    \n    Object.values( elementsWhosNeighborsChanged.current ).forEach( el => {\n      \n      \n      let count = 0;\n      el.neighbors.forEach( neighbor => {\n        if( neighbor.value === 1 ){\n          count++;\n        }\n      } );\n      \n      if( el.value === 1 ){\n        if( count > 3 || count < 2 ){\n          changeToWhite.push( el );\n          el.stationCount = 0;\n        }\n      }else{\n        if( count === 3 ){\n          changeToBlue.push( el );\n          el.stationCount = 0;\n        }\n        \n      }\n    } );\n    \n    elementsWhosNeighborsChanged.current = {};\n    changeToBlue.forEach( object => {\n      object.ref.current.setAttribute( \"stroke\", \"blue\" );\n      object.value = 1;\n      object.neighbors.forEach( neighbor => {\n        elementsWhosNeighborsChanged.current[ neighbor.name ] = neighbor;\n      } );\n    } );\n    \n    changeToWhite.forEach( object => {\n      alive.current[ object.name ] = object;\n      object.ref.current.setAttribute( \"stroke\", \"white\" );\n      object.value = 0;\n      \n      object.neighbors.forEach( neighbor => {\n        elementsWhosNeighborsChanged.current[ neighbor.name ] = neighbor;\n      } );\n      \n    } );\n    \n    setGeneration( state => state + 1 );\n    Object.values( alive.current ).forEach( el => {\n      el.stationCount++;\n      el.ref.current.setAttribute( \"fill\",\n        `rgba(${ 255 / el.stationCount }, 255, 255, 1)`,\n      );\n    } );\n    \n    if( keepPlaying.current ){\n      requestAnimationFrame( play );\n    }\n    \n  };\n  \n  const makeRandom = () => {\n    if( !elementsWhosNeighborsChanged.current ){\n      elementsWhosNeighborsChanged.current = {};\n    }\n    \n    if( playing ){\n      return;\n    }\n    const num = Math.ceil( Math.random() * ( gridSize * gridSize / 2 ) ) +\n      gridSize * gridSize / 10;\n    \n    for( let i = 0; i < num; i++ ){\n      const random1 = Math.floor( Math.random() * gridSize );\n      const random2 = Math.floor( Math.random() * gridSize );\n      const el = array.current[ random1 ][ random2 ];\n      el.value = 1;\n      alive.current[ el.name ] = el;\n      el.ref.current.setAttribute( \"stroke\", \"blue\" );\n      el.neighbors.forEach( neighbor => {\n        elementsWhosNeighborsChanged.current[ neighbor.name ] = neighbor;\n      } );\n    }\n    \n  };\n  \n  const onCellClick = ( index1, index2 ) => {\n    if( playing ){\n      return;\n    }\n    array.current[ index1 ][ index2 ].ref.current.setAttribute( \"stoke\",\n      \"blue\",\n    );\n  };\n  \n  const reset = () => {\n    setReady( false );\n    setGeneration( 0 );\n    array.current.forEach( ( row, i ) => {\n      row.forEach( ( el, index2 ) => {\n        el.ref.current.setAttribute( \"stroke\", \"white\" );\n        el.value = 0;\n      } );\n    } );\n    setReady( true );\n    \n  };\n  \n  return ( <Container>\n    <Grid>\n      <svg width=\"100%\" height=\"100%\"\n           viewBox=\"0 0 1000 1000\"\n           xmlns=\"http://www.w3.org/2000/svg\">\n        { Array.isArray( array.current ) &&\n        array.current.map( ( row, index ) => {\n          return row.map( ( val, index2 ) => {\n            return <rect ref={ val.ref } width={ ( 1000 / gridSize ) }\n                         height={ ( 1000 / gridSize ) }\n                         transform={ `translate(${ 1000 / gridSize *\n                         index2 }, ${ 1000 / gridSize * index })` }\n                         fill={ \"white\" }\n                         onClick={ () => onCellClick( index, index2 ) }\n                         stroke=\"white\"/>;\n          } );\n        } ) }\n      </svg>\n    </Grid>\n    <GameButtons>\n      <h1>Generation: { generation }</h1>\n      <Button onClick={ makeRandom }\n              disabled={ playing }>Randomize</Button>\n      <Button onClick={ () => {\n        if( playing ){\n          keepPlaying.current = false;\n          setPlaying( false );\n          window.setTimeout( () => {\n            setReady( !ready );\n          }, 1000 );\n        }else{\n          keepPlaying.current = true;\n          play();\n        }\n      } }>{ playing ? \"Stop\" : \"Start\" }</Button>\n      <Button onClick={ () => {\n        if( playing ){\n          keepPlaying.current = false;\n          setPlaying( false );\n          reset();\n        }else{\n          reset();\n        }\n      } }>Reset</Button>\n      <Input disabled={ playing }\n             onChange={ ( e ) => setGridSize( e.target.value ) }\n             value={ gridSize } type={ \"number\" }/>\n    </GameButtons>\n  </Container> );\n};\n\nconst Grid = styled.div`\ndisplay: flex;\nflex-direction: column;\nwidth: 70%;\n`;\n\nconst GameButtons = styled.div`\ndisplay: flex;\nflex-direction: column;\nheight: 100%;\n`;\n\nconst Container = styled.div`\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nwidth: 100%;\nheight: 100%;\nmin-height: 70vh;\n`;\n\nGameOfLife.propTypes = {};\n\nexport default GameOfLife;","import React from \"react\";\nimport \"./App.css\";\nimport GameOfLife from \"./components/GameOfLife.js\";\n\nfunction App(){\n  return ( <div className=\"App\">\n    <header className=\"App-header\">\n      <h1>Game of life.</h1>\n      <GameOfLife/>\n    </header>\n  </div> );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render( <React.StrictMode>\n  <App/>\n</React.StrictMode>, document.getElementById( \"root\" ) );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}